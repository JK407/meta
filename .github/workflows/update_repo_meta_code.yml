name: Generate and Push Protobuf Files

on:
  push:
    branches:
      - master  # 监听 master 分支的推送事件
    paths:
      - 'pb/**/*.proto'  # 只在 pb 目录下的 .proto 文件发生变化时触发

jobs:
  generate_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Meta Repository
        uses: actions/checkout@v2
        with:
          repository: JK407/meta  # 当前仓库
          token: ${{ secrets.GEN_PROTO }}  # 使用 GitHub 提供的 token

      - name: Checkout MetaCode Repository
        uses: actions/checkout@v2
        with:
          repository: JK407/metaCode  # 目标仓库
          path: metaCode  # 将目标仓库检出到 metaCode 目录
          token: ${{ secrets.GEN_PROTO }}  # 使用 GitHub 提供的 token

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.21'  # 设置 Go 版本

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install protoc-gen-go and protoc-gen-go-grpc
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Generate pb.go and rpc.pb.go files in Meta Repository
        run: |
          # 遍历 pb 目录下的所有 .proto 文件，生成对应的 pb.go 和 rpc.pb.go 文件
          for proto_file in $(find pb -name '*.proto'); do
            # 获取 package 名称
            package_name=$(grep -m 1 '^package ' "$proto_file" | awk '{print $2}' | tr -d ';')
            # 创建对应的目录
            mkdir -p "pb/$package_name"
            # 生成 pb.go 和 rpc.pb.go 文件
            protoc --go_out="pb/$package_name" --go-grpc_out="pb/$package_name" "$proto_file"
          done
          # 调试信息：列出生成的文件
          echo "Generated files in Meta Repository:"
          find pb -name '*.go'

      - name: Commit and Push Changes to Meta Repository
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add pb/**/*.go  # 确保添加所有生成的 .go 文件
          git commit -m "Update generated pb.go and rpc.pb.go files" || echo "No changes to commit"
          git push

      - name: Generate pb.go and rpc.pb.go files in MetaCode Repository
        run: |
          # 遍历 pb 目录下的所有 .proto 文件，生成对应的 pb.go 和 rpc.pb.go 文件
          for proto_file in $(find pb -name '*.proto'); do
            # 获取 package 名称
            package_name=$(grep -m 1 '^package ' "$proto_file" | awk '{print $2}' | tr -d ';')
            # 创建对应的目录
            mkdir -p "metaCode/pb/$package_name"
            # 生成 pb.go 和 rpc.pb.go 文件
            protoc --go_out="metaCode/pb/$package_name" --go-grpc_out="metaCode/pb/$package_name" "$proto_file"
          done
          # 调试信息：列出生成的文件
          echo "Generated files:"
          find metaCode/pb -name '*.go'

      - name: Commit and Push Changes to MetaCode
        run: |
          cd metaCode
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add pb/*.go
          git commit -m "Update generated pb.go and rpc.pb.go files"
          git push